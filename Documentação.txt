---- Projeto Integrador Desenvolvedor Mobile – App Finansim ----
     Autor: Márcio Teodoro

-- Objetivo da aplicação --
Facilitar o controle de gastos e resultados de uma empresa, que irá cadastrar seus setores, registrar seus números e ver relatórios sobre o estado financeiro atual da empresa.

-- Título --
Assistente de Finanças Simples

-- Descrição --
Melhore a administração financeira da sua empresa com a Finansim, que te trará relatórios de resultados e investimentos internos de todos os meses do ano, para lhe auxiliar com um panorama geral da tesouraria da sua empresa.

-- Público Alvo --
Empresas de pequeno e médio porte, que não necessitem de relatórios e dados complexos, com o aplicativo sendo uma boa opção para “startups”.

-- Requisitos Funcionais Planejados --
    Permitir o cadastro e a remoção de setores da empresa através de uma lista preexistente. (Não implementado)

    Permitir o cadastro, edição e remoção de dados do setor predefinidos, como número de vendas, colaboradores etc. (Implementado mas com setores criados pelo usuário)

    Exibir relatórios, no formato de listas, dos dados dos setores, com os valores divididos por mês, e com as contagens finais também sendo exibidas. (Implementado)

    Divisão dos relatórios em três categorias principais, cada uma em sua tela: Vendas, Compras e Pagamentos. (Implementado)

-- Descrição das funcionalidades --
A principal funcionalidade do app é fazer e manipular registros de dois tipos de números financeiros em três categorias, todos os registros contendo um setor, que é de onde esses números vem. O primeiro tipo representa um valor monetário e o segundo uma quantidade. As categorias são Vendas, Compras e Pagamentos.

Para as categorias Vendas e Compras são exibidos relatórios referentes a cada mês do ano, com esses relatórios sendo a exibição de todos os registros atrelados a aquele mês.

Os números de vendas são: Resultados e número de vendas, de Compras: Valores investidos e número de compras, e de Pagamentos: Valor pago em salários e número de colaboradores.

Para a categoria de Pagamentos é exibido apenas um relatório geral daqueles números registrados.

É permitada apenas a edição do mês e dos números registrados, com o setor não podendo ser alterado.

É permitida a exclusão desses registros.

Os registros são armazenados no Firebase Firestore. A exibição dos relatórios é feita em tempo real pela função onSnapshot do Firestore.

O app utiliza o serviço de autenticação por email e senha do Firebase, para cadastro, entrada e saída dos usuários.

Os dados do usuário, (uid, nome da empresa e nome de usuário) são armazenados na memória do app pela biblioteca React Native Async Storage, com o Firebase Auth utilizando o Async Storage para persitência da autenticação. É feita a leitura desses dados para salvar os registros no banco de dados, com eles fazendo referência ao usuário. E encerrar a sessão remove o item armazenado assíncronamente.

É utilizada a API ViaCEP no cadastro de usuários para completar o endereço do usuário conforme o CEP digitado, mas pode-se fazer o cadastro sem colocar um endereço.

O app utiliza navegação aninhada de telas atráves das bibliotecas do React Navigation, a Stack Navigator e a Bottom Tabs Navigator.

São utilizados os hooks useState e useEffect do React, para salvar dados em tempo real e executar funções conforme o aplicativo roda.

-- Precificação e Monetização --
O aplicativo será completamente gratuito e sem anúncios no seu primeiro ano e após conseguir uma base de usuários, oferecerá uma assinatura mensal que dará acesso a mais recursos.

-- Requisitos de Usuário Planejados --
    As empresas que desejam utilizar o aplicativo terão que realizar um cadastro no banco de dados do app, através de uma tela especifica para isso, para então ter acesso as funcionalidades do app. (Implementado)

    As empresas precisarão adicionar manualmente seus setores e os dados monetários de cada mês para exibição nos relatórios, através de uma tela especifica para isso. (Implementado)

    Para editar os dados monetários de qualquer uma das categorias, terá que ser feita a autenticação através da senha cadastrada. (Não implementado, o usuário precisa estar autenticado, mas não é pedida a senha na hora da edição ou remoção de registros.)

-- Estrutura de Pastas --
    "src/" Pasta que contém a maior parte dos arquivos criados por mim para desenvolver o app.

    "src/assets/" Contém a logo do app, que é usada como ícone.

    "src/components/" Contém o componente de relatórios, que é o responsável pela consulta e exibição dos registros no banco de dados, de acordo com a Categoria que chamou esse componente e com os dados do usuário autenticado.

    "src/routes/" Os componentes que definem as rotas de navegação, com os navigators e suas screens.

    "src/screens/" Os componentes que são as telas renderizadas pelo aplicativo, conforme seu chamamento nas rotas de navegação.

    "src/styles/" Onde ficam os arquivos que contém as folhas de estilos criadas, contendo uma principal e outras focadas em telas específicas.

-- Descrição dos arquivos --
Pasta da Unidade Currícular:
    "Documentação.txt" (esse arquivo): Documentação no formato txt.

    "Fluxograma de navegação.png" Fluxograma da navegação das telas.

    "logo.png" Logo e ícone do aplicativo.

    "padrao_cores_usadas.jpg" O padrão de cores usado na estilização do app.

    "ReadMe.md" Arquivo leia-me, com uma explicação mais breve do aplicativo e contendo as instruções para execução do mesmo.

Pasta do projeto:
    "package.json" Arquivo que contém as bibliotecas, ferramentas e dependências utilizadas na aplicação.

    "initializeFirebase.js" Arquivo para inicialização de uso das bibliotecas do Firebase.

    "App.js" Componente principal do app, com a primeira rota de navegação e a verificação da autenticação e do armazenamento assíncrono.

    "src/routes/RotaEntrada.js" Rota com as telas de boas vindas, cadastro e entrada.

    "src/routes/RotaPrincipal.js" Rota com a rota dos relatórios e as telas de adicionar e editar dados.

    "src/routes/RotaRelatorios.js" Rota com as telas das categorias e a tela da empresa.

    "src/components/Relatorios.js" Componente que faz consulta de todos os registros no banco de dados, da categoria recebida por parâmetro.

Pasta src/screens/:
    "AddDados.js" Tela para criar os registros financeiros e armazena-los no banco de dados.

    "BoasVindas.js" Tela inicial para usuários não autenticados.

    "Cadastro.js" Tela para cadastrar o usuário na autenticação e os dados da empresa.

    "Compras.js" Tela que exibe os relatórios de compras.

    "EditarDados.js" Tela para atualizar o registro selecionado no relatório.

    "Empresa.js" Exibe as informações da empresa cadastrada e tem botões para adicionar um registro e encerrar a sessão do usuário.

    "Entrada os" Tela para o usuário fazer autenticação depois de já ter se cadastrado.

    "Pagamentos.js" Tela que exibe os relatórios de pagamentos.

    "Vendas.js" Tela que exibe os relatórios de vendas.

-- Banco de Dados --
O banco de dados utilizado é o Firebase Firestore, com formato não relacional, o Firestore não utiliza schemas para definir como os dados são organizados.

- São usadas quatro coleções:
    "compras" Contém os documentos com os registros financeiros da categoria Compras.

    "vendas" Contém os documentos com os registros financeiros da categoria Vendas.

    "pagamentos" Contém os documentos com os registros financeiros da categoria Pagamentos.

    "empresas" Contém os documentos com os dados das empresas cadastradas.

- Os documentos das coleções de compras, vendas e pagamentos contém os seguintes campos:
    "setor" O nome de um setor, área ou categoria daquele registro.

    "mes" Não presente na coleção de pagamentos, armazena o mês que aquele registro pertence.

    "usuario" Contém o uid do usuário autenticado que criou o registro.

    "empresa" Contém o nome da empresa cadastrada pelo usuário autenticado que criou o registro.

    "numero" Número que representa uma quantidade associada a aquele registro.

    "valor" Número que representa um valor monetário associado a aquele registro.

- Os documentos da coleção empresa contém os seguintes campos:
    "bairro","cep","cidade","estado","rua","numeroEst" Dados do endereço da empresa.

    "idUsuario" uid do usuário autenticado que cadastrou a empresa.

    "nomeEmpresa" Nome da empresa cadastrada.

    "nomeUsuario" Nome cadastrado do usuário autenticado.

-- Ambiente de Desenvolvimento --
Esse é um aplicativo Expo, que é um aplicativo React Native que usa as ferramentas do Expo.

A linguagem principal usada é Javascript, utilizando os componentes do React Native com marcação JSX.

Banco de dados e autenticação são feitos por integração com o Firebase.

Para criação e hospedagem das builds de desenvolvimento e produção é utilizado o Expo Application Services (EAS).

Os testes do app são feitos em um Samsung Galaxy A55 e no emulador de dispositivo do Android Studio, utilizando uma build de desenvolvimento compilada pelo EAS.

Nenhum padrão arquitetural foi utilizado plenamente.

Não será feita a publicação em loja de aplicativos, nem deploy dessa aplicação, ficando disponível apenas a build preview temporariamente e o código fonte.

-- Ferramentas Usadas e Dependências --
Consulte o arquivo "package.json" na pasta raiz do projeto.

-- Protótipo no Figma --
https://www.figma.com/design/s2pnA0seBIVWfZWlOaJChV/App-de-Finan%C3%A7as?node-id=0-1&node-type=canvas&t=wjLQPeqVZ97kacyd-0

Esse protótipo contém cinco telas que guiam como as telas do projeto final devem ser.
A estrutura de algumas telas seguirá a de outras, como a de cadastro e entrada, as telas dos relatórios e as telas de adição e edição dos registros adicionados.

-- Licença --
Esse aplicativo está sob a proteção da licença GNU GPL-3, consulte o arquivo "LICENSE".